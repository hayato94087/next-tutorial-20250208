name: Vercel Preview Deployment

on:
  push:
    branches-ignore:
      - main

env:
  NODE_VERSION: "20.0.0"
  PNPM_VERSION: "9.15.1"

permissions:
  contents: read
  deployments: write

jobs:
  deploy-preview:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Setup environment
        uses: ./.github/actions/setup
        with:
          node-version: ${{ env.NODE_VERSION }}
          pnpm-version: ${{ env.PNPM_VERSION }}

      - name: Install Vercel CLI
        run: pnpm add --global vercel@latest

      - name: Pull Vercel Environment Information
        run:
          vercel pull --yes --environment=preview --token=${{
          secrets.VERCEL_TOKEN }}
        env:
          VERCEL_ORG_ID: ${{ secrets.VERCEL_ORG_ID }}
          VERCEL_PROJECT_ID: ${{ secrets.VERCEL_PROJECT_ID }}

      - name: Pull Vercel Environment Information
        run:
          vercel pull --yes --environment=preview --token=${{
          secrets.VERCEL_TOKEN }}
        env:
          VERCEL_ORG_ID: ${{ secrets.VERCEL_ORG_ID }}
          VERCEL_PROJECT_ID: ${{ secrets.VERCEL_PROJECT_ID }}

      - name: Set Vercel Environment Variables
        run: |
          vercel env rm DEBUG_URL preview --yes --token=${{ secrets.VERCEL_TOKEN }} || true
          echo "${{ secrets.TEST_DEBUG_URL }}" | vercel env add DEBUG_URL preview --token=${{ secrets.VERCEL_TOKEN }}
        env:
          VERCEL_ORG_ID: ${{ secrets.VERCEL_ORG_ID }}
          VERCEL_PROJECT_ID: ${{ secrets.VERCEL_PROJECT_ID }}

      - name: Verify Vercel Environment Variables
        run: |
          echo "Listing Vercel environment variables:"
          vercel env ls preview --token=${{ secrets.VERCEL_TOKEN }}
        env:
          VERCEL_ORG_ID: ${{ secrets.VERCEL_ORG_ID }}
          VERCEL_PROJECT_ID: ${{ secrets.VERCEL_PROJECT_ID }}

      - name: Build Project Artifacts
        run: vercel build --token=${{ secrets.VERCEL_TOKEN }}
        env:
          VERCEL_ORG_ID: ${{ secrets.VERCEL_ORG_ID }}
          VERCEL_PROJECT_ID: ${{ secrets.VERCEL_PROJECT_ID }}
          DEBUG_URL: ${{ secrets.TEST_DEBUG_URL }}

      - name: Deploy Project Artifacts to Vercel
        run: |
          DEPLOYMENT_OUTPUT=$(vercel deploy --prebuilt --token=${{ secrets.VERCEL_TOKEN }})
          DEPLOYMENT_URL=$(echo $DEPLOYMENT_OUTPUT | tr -d '\n')
          if [ -z "$DEPLOYMENT_URL" ]; then
            echo "Deployment failed"
            exit 1
          fi
          echo "DEPLOYMENT_URL=$DEPLOYMENT_URL" >> $GITHUB_ENV
          echo "Deployment URL: $DEPLOYMENT_URL"
        env:
          VERCEL_ORG_ID: ${{ secrets.VERCEL_ORG_ID }}
          VERCEL_PROJECT_ID: ${{ secrets.VERCEL_PROJECT_ID }}
          DEBUG_URL: ${{ secrets.TEST_DEBUG_URL }}

      - name: Generate Random Subdomain and Assign Custom Domain
        run: |
          # Generate a random 8-character alphanumeric string for the subdomain
          RANDOM_SUBDOMAIN=$(openssl rand -base64 6 | tr -dc 'a-zA-Z0-9' | fold -w 8 | head -n 1)
          FULL_DOMAIN="${RANDOM_SUBDOMAIN}.${{ secrets.DOMAIN }}"
          echo "Generated subdomain: $FULL_DOMAIN"

          # Add the domain to the project
          echo "Adding domain to project: $FULL_DOMAIN"
          if ! vercel domains add $FULL_DOMAIN --token=${{ secrets.VERCEL_TOKEN }}; then
            echo "Failed to add domain to project"
            exit 1
          fi

          # Assign the domain to the deployment
          echo "Assigning domain to deployment: $FULL_DOMAIN"
          if ! vercel alias set ${{ env.DEPLOYMENT_URL }} $FULL_DOMAIN --token=${{ secrets.VERCEL_TOKEN }}; then
            echo "Failed to assign custom domain"
            exit 1
          fi
          echo "Custom domain assigned successfully: $FULL_DOMAIN"
          echo "PREVIEW_URL=https://$FULL_DOMAIN" >> $GITHUB_ENV
        env:
          VERCEL_ORG_ID: ${{ secrets.VERCEL_ORG_ID }}
          VERCEL_PROJECT_ID: ${{ secrets.VERCEL_PROJECT_ID }}

      - name: Output Preview URL
        run: |
          echo "Preview URL: ${{ env.PREVIEW_URL }}"
          echo "Deployment URL: ${{ env.DEPLOYMENT_URL }}"
